<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d1" for="edge" attr.name="color" attr.type="string" />
  <key id="d0" for="node" attr.name="color" attr.type="string" />
  <graph edgedefault="undirected">
    <node id="JS1">
      <data key="d0">blue</data>
    </node>
    <node id="JavaScript data types are the types of data that can be manipulated in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="There are two main types of data types in JavaScript: primitive and non-primitive.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1">
      <data key="d0">blue</data>
    </node>
    <node id="Primitive data types in JavaScript are basic data types that include String, Number, Boolean, Null, Undefined, and Symbol.">
      <data key="d0">green</data>
    </node>
    <node id="Primitive data types are immutable, meaning their values cannot be changed.">
      <data key="d0">green</data>
    </node>
    <node id="Each primitive data type has its own syntax and rules for manipulation.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.1">
      <data key="d0">blue</data>
    </node>
    <node id="A String is a sequence of characters in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="Strings in JavaScript are enclosed within quotes ('', &quot;&quot;, or ``).">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.1.1">
      <data key="d0">blue</data>
    </node>
    <node id="Strings can be manipulated using various methods like concatenation (+), substring(), slice(), etc.">
      <data key="d0">green</data>
    </node>
    <node id="String methods do not change the original string, but return a new string.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.1.2">
      <data key="d0">blue</data>
    </node>
    <node id="String interpolation is a process of substituting values of variables into placeholders in a string.">
      <data key="d0">green</data>
    </node>
    <node id="In JavaScript, string interpolation can be achieved using template literals (`${expression}`).">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.2">
      <data key="d0">blue</data>
    </node>
    <node id="The Number data type represents both integer and floating point numbers in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="There are also three symbolic values: +Infinity, -Infinity, and NaN.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.2.1">
      <data key="d0">blue</data>
    </node>
    <node id="Numbers can be manipulated using arithmetic operations like addition (+), subtraction (-), multiplication (*), division (/), etc.">
      <data key="d0">green</data>
    </node>
    <node id="There are also various methods and properties available for Number objects.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.2.2">
      <data key="d0">blue</data>
    </node>
    <node id="Numbers can be converted to other data types using methods like toString(), toFixed(), toExponential(), etc.">
      <data key="d0">green</data>
    </node>
    <node id="Implicit type coercion can also occur when numbers are used with other data types.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.3">
      <data key="d0">blue</data>
    </node>
    <node id="The Boolean data type represents logical entities and can have two values: true or false in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.3.1">
      <data key="d0">blue</data>
    </node>
    <node id="Boolean values can be manipulated using logical operators like AND (&amp;&amp;), OR (||), NOT (!).">
      <data key="d0">green</data>
    </node>
    <node id="Boolean values are often used for conditional testing.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.1.3.2">
      <data key="d0">blue</data>
    </node>
    <node id="In JavaScript, truthy values are values that are considered true when encountered in a Boolean context.">
      <data key="d0">green</data>
    </node>
    <node id="Falsy values are values that are considered false when encountered in a Boolean context.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2">
      <data key="d0">blue</data>
    </node>
    <node id="Non-Primitive data types in JavaScript include Object, Array, and Function.">
      <data key="d0">green</data>
    </node>
    <node id="Non-primitive data types are mutable, meaning their values can be changed.">
      <data key="d0">green</data>
    </node>
    <node id="Each non-primitive data type has its own syntax and rules for manipulation.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.1">
      <data key="d0">blue</data>
    </node>
    <node id="An Object is a collection of properties, and a property is an association between a key (or name) and a value in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="Objects in JavaScript can be created using the object literal syntax ({}) or the new keyword.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.1.1">
      <data key="d0">blue</data>
    </node>
    <node id="Objects can be manipulated by accessing, adding, modifying, or deleting properties.">
      <data key="d0">green</data>
    </node>
    <node id="Object methods and 'this' keyword are also essential parts of object manipulation.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.1.2">
      <data key="d0">blue</data>
    </node>
    <node id="Object constructors are used for creating new objects of the same type.">
      <data key="d0">green</data>
    </node>
    <node id="The prototype is an object that is associated with every functions and objects by default in JavaScript, and it can be used to define methods and properties that can be inherited by objects.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.2">
      <data key="d0">blue</data>
    </node>
    <node id="An Array is a special type of object that represents a collection of elements in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="Arrays in JavaScript can be created using the array literal syntax ([]) or the Array constructor.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.2.1">
      <data key="d0">blue</data>
    </node>
    <node id="Arrays can be manipulated using various methods like push(), pop(), shift(), unshift(), splice(), etc.">
      <data key="d0">green</data>
    </node>
    <node id="Array methods can change the original array or return a new array.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.2.2">
      <data key="d0">blue</data>
    </node>
    <node id="Arrays can be iterated over using methods like forEach(), map(), filter(), reduce(), etc.">
      <data key="d0">green</data>
    </node>
    <node id="These methods can be used to perform operations on each element of the array.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.3">
      <data key="d0">blue</data>
    </node>
    <node id="A Function is a set of statements that performs a task or calculates a value in JavaScript.">
      <data key="d0">green</data>
    </node>
    <node id="Functions in JavaScript can be created using the function declaration, function expression, or arrow function syntax.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.3.1">
      <data key="d0">blue</data>
    </node>
    <node id="Functions can be invoked by appending () to the function name.">
      <data key="d0">green</data>
    </node>
    <node id="Functions can take parameters and return a value.">
      <data key="d0">green</data>
    </node>
    <node id="Function scope and closures are essential parts of function manipulation.">
      <data key="d0">green</data>
    </node>
    <node id="JS1.2.3.2">
      <data key="d0">blue</data>
    </node>
    <node id="A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed.">
      <data key="d0">green</data>
    </node>
    <node id="Promises in JavaScript represent a completion or failure of an asynchronous operation, and can be used to handle asynchronous code.">
      <data key="d0">green</data>
    </node>
    <edge source="JS1" target="JavaScript data types are the types of data that can be manipulated in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1" target="There are two main types of data types in JavaScript: primitive and non-primitive.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1" target="JS1.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1" target="JS1.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1" target="Primitive data types in JavaScript are basic data types that include String, Number, Boolean, Null, Undefined, and Symbol.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1" target="Primitive data types are immutable, meaning their values cannot be changed.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1" target="Each primitive data type has its own syntax and rules for manipulation.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1" target="JS1.1.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1" target="JS1.1.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1" target="JS1.1.3">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.1" target="A String is a sequence of characters in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.1" target="Strings in JavaScript are enclosed within quotes ('', &quot;&quot;, or ``).">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.1" target="JS1.1.1.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.1" target="JS1.1.1.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.1.1" target="Strings can be manipulated using various methods like concatenation (+), substring(), slice(), etc.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.1.1" target="String methods do not change the original string, but return a new string.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.1.2" target="String interpolation is a process of substituting values of variables into placeholders in a string.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.1.2" target="In JavaScript, string interpolation can be achieved using template literals (`${expression}`).">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2" target="The Number data type represents both integer and floating point numbers in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2" target="There are also three symbolic values: +Infinity, -Infinity, and NaN.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2" target="JS1.1.2.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.2" target="JS1.1.2.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.2.1" target="Numbers can be manipulated using arithmetic operations like addition (+), subtraction (-), multiplication (*), division (/), etc.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2.1" target="There are also various methods and properties available for Number objects.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2.2" target="Numbers can be converted to other data types using methods like toString(), toFixed(), toExponential(), etc.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.2.2" target="Implicit type coercion can also occur when numbers are used with other data types.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.3" target="The Boolean data type represents logical entities and can have two values: true or false in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.3" target="JS1.1.3.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.3" target="JS1.1.3.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.1.3.1" target="Boolean values can be manipulated using logical operators like AND (&amp;&amp;), OR (||), NOT (!).">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.3.1" target="Boolean values are often used for conditional testing.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.3.2" target="In JavaScript, truthy values are values that are considered true when encountered in a Boolean context.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.1.3.2" target="Falsy values are values that are considered false when encountered in a Boolean context.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2" target="Non-Primitive data types in JavaScript include Object, Array, and Function.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2" target="Non-primitive data types are mutable, meaning their values can be changed.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2" target="Each non-primitive data type has its own syntax and rules for manipulation.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2" target="JS1.2.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2" target="JS1.2.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2" target="JS1.2.3">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.1" target="An Object is a collection of properties, and a property is an association between a key (or name) and a value in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.1" target="Objects in JavaScript can be created using the object literal syntax ({}) or the new keyword.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.1" target="JS1.2.1.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.1" target="JS1.2.1.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.1.1" target="Objects can be manipulated by accessing, adding, modifying, or deleting properties.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.1.1" target="Object methods and 'this' keyword are also essential parts of object manipulation.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.1.2" target="Object constructors are used for creating new objects of the same type.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.1.2" target="The prototype is an object that is associated with every functions and objects by default in JavaScript, and it can be used to define methods and properties that can be inherited by objects.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2" target="An Array is a special type of object that represents a collection of elements in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2" target="Arrays in JavaScript can be created using the array literal syntax ([]) or the Array constructor.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2" target="JS1.2.2.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.2" target="JS1.2.2.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.2.1" target="Arrays can be manipulated using various methods like push(), pop(), shift(), unshift(), splice(), etc.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2.1" target="Array methods can change the original array or return a new array.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2.2" target="Arrays can be iterated over using methods like forEach(), map(), filter(), reduce(), etc.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.2.2" target="These methods can be used to perform operations on each element of the array.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3" target="A Function is a set of statements that performs a task or calculates a value in JavaScript.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3" target="Functions in JavaScript can be created using the function declaration, function expression, or arrow function syntax.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3" target="JS1.2.3.1">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.3" target="JS1.2.3.2">
      <data key="d1">yellow</data>
    </edge>
    <edge source="JS1.2.3.1" target="Functions can be invoked by appending () to the function name.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3.1" target="Functions can take parameters and return a value.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3.1" target="Function scope and closures are essential parts of function manipulation.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3.2" target="A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed.">
      <data key="d1">red</data>
    </edge>
    <edge source="JS1.2.3.2" target="Promises in JavaScript represent a completion or failure of an asynchronous operation, and can be used to handle asynchronous code.">
      <data key="d1">red</data>
    </edge>
  </graph>
</graphml>
