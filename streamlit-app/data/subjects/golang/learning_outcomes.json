{"Concurrency in Go": [{"learning_outcome_stage": "Stage 1: Understanding the Basics of Concurrency in Go", "learning_outcomes": [{"learning_outcome": "Apply the concept of Concurrency in Go to write a simple program that can perform multiple tasks simultaneously.", "concept_ids": ["CG1"]}, {"learning_outcome": "Use goroutines to create a Go program that can run multiple tasks concurrently.", "concept_ids": ["CG1.1"]}, {"learning_outcome": "Implement a simple channel to facilitate communication and synchronization between goroutines in a Go program.", "concept_ids": ["CG1.2"]}]}, {"learning_outcome_stage": "Stage 2: Working with Goroutines", "learning_outcomes": [{"learning_outcome": "Apply the knowledge of creating goroutines to write a Go program that uses goroutines for concurrent execution of tasks.", "concept_ids": ["CG1.1.1"]}, {"learning_outcome": "Implement goroutine scheduling in a Go program to manage the execution of multiple goroutines.", "concept_ids": ["CG1.1.2"]}, {"learning_outcome": "Use synchronization primitives like WaitGroups and Mutexes to manage the execution of goroutines in a Go program.", "concept_ids": ["CG1.1.3"]}]}, {"learning_outcome_stage": "Stage 3: Deep Dive into Goroutine Synchronization", "learning_outcomes": [{"learning_outcome": "Apply Mutexes to ensure that only one goroutine accesses a variable or a section of code at a time in a Go program.", "concept_ids": ["CG1.1.3.1"]}, {"learning_outcome": "Implement WaitGroups to wait for a collection of goroutines to finish executing in a Go program.", "concept_ids": ["CG1.1.3.2"]}]}, {"learning_outcome_stage": "Stage 4: Working with Channels", "learning_outcomes": [{"learning_outcome": "Use the `make` function and `chan` keyword to create channels in a Go program.", "concept_ids": ["CG1.2.1"]}, {"learning_outcome": "Apply the knowledge of channel operations to send and receive data on a channel in a Go program.", "concept_ids": ["CG1.2.2"]}, {"learning_outcome": "Implement the `range` keyword to iterate over the values in a channel until the channel is closed in a Go program.", "concept_ids": ["CG1.2.3"]}, {"learning_outcome": "Use the select statement to choose from multiple send/receive channel operations in a Go program.", "concept_ids": ["CG1.2.4"]}, {"learning_outcome": "Apply channel direction to restrict channels to either send-only or receive-only operations in a Go program.", "concept_ids": ["CG1.2.5"]}]}, {"learning_outcome_stage": "Stage 5: Advanced Channel Operations", "learning_outcomes": [{"learning_outcome": "Implement the process of sending data on channels in a Go program.", "concept_ids": ["CG1.2.2.1"]}, {"learning_outcome": "Use the `<-` operator to receive data from channels in a Go program.", "concept_ids": ["CG1.2.2.2"]}]}]}